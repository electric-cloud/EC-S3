<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta name="generator"
          content="HTML Tidy for Windows (vers 14 February 2006), see www.w3.org" />
    <meta content="text/html; charset=us-ascii"
          http-equiv="content-type" />
					
<!-- Enter the new plugin name in the following line. -->				

    <title>ElectricFlow Plugin for [Plugin Name]</title>
    <link rel="stylesheet"
          href="../../plugins/[Plugin Name]/pluginhelp.css"
          type="text/css"
          media="screen" />
</head>

<body>
    <div class="help">
		
		<!-- Enter the new [Plugin name] in the following line. -->		

        <h1>[Plugin name]</h1>
				
				<!-- Do not change the following line. -->		

        <p>Plugin Version @PLUGIN_VERSION@</p>

        <hr style="margin-left: -10px; margin-top: 10px; height: 1px; width: 100%; color: #5981BD;" noshade="noshade" />

        <!-- The tool description should answer these kinds of questions: 
				What is the tool itself is used for in the development process? 
				Who would use this tool? What is the general use-case or problem that this tool solves? 
				Look at the tool's documentation or website(s) to get their own descriptions. 
				Look at Wikipedia or other outside websites. 
				If there is a Hudson plugin, read their documentation for ideas, examples, etc. 
				It's OK to copy word-for-word only if appropriate, such as FOSS - but not commercial software.
            -->

				<!--If you are revising a plugin, enter the date when the current sprint will end.
				If you are writing the first version of a new plugin, change "Revised on" to "Created on" and 
				enter the date when the current sprint will end, and the document will be published.-->		
				
        <p>Revised on [end date for the current sprint]</p>
				
				<h1>Contents</h1>
				
				<ul>
				<li><p><a href="#overview">Overview</a></p></li>
				<li><p><a href="#setupconfig">Setting Up the Plugin Configuration</a></p></li>
				<li><p><a href="#procedures">Plugin Procedures</a></p></li>
				<ul>
				
				<!-- Add a line for each plugin procedure. The following are examples. -->		
				
				<li><a href="#Procuedure1">Procuedure1</a></li>
				<li><a href="#Procuedure2">Procuedure2</a></li>
				</ul>
				
				<!-- Include this section only if there are examples and use cases. -->	
				
				<li><p><a href="#example">Examples and Use Cases</a></p></li>
				<ul>
				
				<!-- Add a line for each example or use case. The following is an example. -->
				
				<li><a href="#UseCase1">UseCase1</a></li>
				</ul>
				<li><p><a href="#rns">Release Notes</a></p></li>
				</ul>
					
		    <!-- The next section is required. -->
				
				<h1 id="overview">Overview</h1>
				
				<!-- The integration description should answer the questions: 
				How deep does our integration go? Why should I care? 
				What general functionality does the plugin include? 
				What functionality does the plugin omit? -->
				
				<!-- The following is an example description. Replace it with the new plugin description. -->
				
				<p>This is example text (one or more paragraphs):</p>
						
        <p>Gerrit is a web-based code review system, facilitating online code reviews for projects using the Git version control system. 
				It provides a systematic process for evaluating and approving source code changes before they are committed. Gerrit provides 
				facilities to park changes until they are approved by appropriate engineers. Engineers are notified of a change (or they sign 
				into the Gerrit server to find new changes) and must decide if the change should be accepted into the code base. This process is 
				typically implemented by manual code review and/or by pulling changes into a local workspace, building the changes, and running 
				some tests.</p>

        <!-- This section is required. Replace the plugin name, the URL to the website with the new plugin information, and the name of the link. -->	
				<!-- Example of [Plugin name] is OpenStack or Chef. -->	
				<!-- Example of [Name of plugin or website page] is OpenStack or OpenStack Home Page. -->		
							
				<p>For more information about [Plugin Name], go to the <a href="http://code.google.com/p/gerrit/">[Name of the plugin or website page]</a>.</p>

        <h2>ElectricCommander Integration to [Plugin Name]</h2>
				
				<!-- The integration description should answer the questions:
        How deep does our integration go? Why should I care?
        What general functionality does the plugin include? 
				What functionality does the plugin omit? -->
				
				<!-- The following is an example description. Replace it with the new plugin content. -->

        <p>This is example text (one or more paragraphs):</p>
				
				<p>The ElectricCommander Gerrit plugin simplifies the build/test approval process. The goal is to run tests automatically 
				before the reviewer looks at the change, although a setting is available to run builds on demand only. The Android team 
				published a <a href="http://source.android.com/submit-patches/workflow">diagram</a> that describes the workflow for 
				submitting changes. </p> 
				
						
			  <h2>Integrated Version</h2>
				
				<!-- Replace the [Plugin name] and [Plugin version] in the following line with the new plugin values. -->

        <p>This plugin was tested against Gerrit 2.8.5. (This is example text.)</p>
				
			<!-- The following is boilerplate text. Do not modify or remove it from the document. -->	
				
		<p>IMPORTANT: For all parameter descriptions in this document, required parameters are shown in <span class='required'>bold italics</span>.</p>
		
		<!-- The next section is required. -->		
		
    <h1 id="setupconfig">Setting Up the Plugin Configuration</h1>

    <!-- This is boilerplate text. Do not modify or remove it from the document. -->	
		
		<p>Plugin configurations are sets of parameters that apply across some or all of the plugin procedures. 
		They reduce repetition of common values, create predefined sets of parameters for end users, and store 
		credentials securely. Each configuration has a unique name that is automatically entered in designated 
		parameters in the procedures.</p>
						
		<h2>Input</h2>
  
    <ol>
		  <li>Go to <b>Administration</b> > <b>Plugins</b> to open the Plugin Manager.</li>
			
			<!-- Replace the [Plugin name is ElectricFlow] in the following line with the name that appears in the UI. -->		
				
		  <li>Find the [Plugin name is ElectricFlow] row.</li>
			
		  <!-- Replace the [Plugin name] in the following lines with the new plugin name. -->
			
			<li>Click <b>Configure</b> to open the [Plugin name] Configurations page.</li> 	
		  <li>Click <b>Create Configuration</b>.</li>
		  <li>To create a [Plugin name] configuration, enter the following information and click <b>OK</b>. 
			<br /> Remember that you may need to create additional configurations later.</li>

                <!-- Replace the information in this table with the parameters for the new plugin. -->
								<table class="grid">
                <thead>
                    <tr>
                        <th>Parameter</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
								<!-- The following is example text. Replace it with the configuration parameters for the new plugin. -->
								    <tr>
                        <td class='required'>Configuration Name</td>
                        <td>Name of the Gerrit configuration.</td>
                    </tr>
                    <tr>
                        <td>Description</td>
                        <td>A description for this configuration.</td>
                    </tr>
                    <tr>
                        <td>Repository Server</td>
                        <td>The server where the repository is located. If you do not specify a server, the default Gerrit server is used. 
												For example, in the <i>git://github.com/ecGerrit/ecGerritTest.git</i> URL, the repository server is <i>github.com</i>. 
												You can specify the server with the protocol that it uses, such as Secure Shell (SSH) in <i>ssh://my_gerrit_server.my_domain.com</i>. 
												If no protocol is specified, the default protocol is <i>Git</i>.</td>		
                    </tr>
                    <tr>
                        <td class='required'>Repository Path</td>
                        <td>The path associated to the <b>Repository Server</b>. For example, the repository path is <i>ecGerrit/ecGerritTest.git</i> in the 
												<i>git://github.com/ecGerrit/ecGerritTest.git</i> URL.</td>
                    </tr>
                    <tr>
                        <td class='required'>Gerrit Server</td>
                        <td>The hostname or IP address of the Gerrit server, such as <i>localhost</i> or <i>github.com</i>.</td>
                    </tr>
                 </tbody>
            </table>
		
		<!-- The following image shows the parameter form consisting of the parameter name and the field in the UI. 
		Change the filename (.png) to the new image filename. -->
		
		<img src="../../plugins/[Plugin Name]/images/Config/[Plugin Name]_config1.png" />
		
		</ol>
						
	  <h2>Output</h2>	 
		
		<!-- Replace the [Plugin name] in the following lines with the new plugin name. -->
		
		<p>The [Plugin name] Configurations page now shows the new configuration.</p>
		
		<!-- The following line is optional. Replace the [Plugin name] in the following lines with the new plugin name. -->
		
		<p>You can also manage your [Plugin name] configurations in this page. Click <b>Edit</b> to modify an existing configuration or 
		<b>Delete</b> to remove an existing configuration.</p>
						
		</div>
		
		<!-- The next section is required. Replace [Procedure1} with the plugin procedure name in the following lines. -->		
		
		 <h1 id="procedures">Plugin Procedures</h1>

     <div class="procedure" id="Procedure1">

     <a name='Procedure1' id="Procedure1"></a> 

     <h2>[Procedure1]</h2>

      <!-- The following is an example description of the procedure. Replace it with the new plugin procedure description. -->
			
			<p>This is example text (one or more paragraphs):</p>
			
			<p>The CustomBuildPrepare procedure uses the new helper methods to prepare an environment to test all the open changes in 
						the Gerrit server and those that were scanned previously, which can include changes from one or more projects.</p>
	    
			<h3>Input</h3>
			
      <ol>
			<li>Go to the [Procedure1] procedure.</li>
			<li>Enter the following parameters:<br />
     <table class="grid">
                <thead>
                    <tr>
                        <th>Parameter</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
								<!-- The following is example text. Replace it with the  parameters for the plugin procedure. -->
                   <tr>
                         <td class='required'>Gerrit Config</td>
                        <td>The name of the configuration that has the connection information for Gerrit.</td>
                    </tr>
                </tbody>
            </table>

				</li>
						
		<br />
		
		<!-- The following image shows the parameter form consisting of the parameter name and the field in the UI. 
		Change the filename (.png) to the new image filename. -->
		
		<img src="../../plugins/[Plugin Name]/images/CustomBuildPrepare/[Plugin Name]_CustomBuildPrepare2.png" />
		<br />

		</ol>   
						
		<h3>Output</h3>
						
		<p>After the job runs, you can view the results on the Job Details page in ElectricCommander. Every job step was completed successfully.</p>
		
		<!-- The following image shows the Job Details page with the results. Change the filename (.png) to the new image filename. -->
		
		<img src="../../plugins/[Plugin Name]/images/CustomBuildPrepare/[Plugin Name]_CustomBuildPrepare3.png" />
		
		<p>In the <b>[Procedure1]</b> step, click the Log button to see the diagnostic information. 
		The output is similar to the following diagnostic report:</p>	
		
		<!-- The following image shows the diagnostic report in the ElectricCommander UI. Change the filename (.png) to the new image filename. -->
		
		<img src="../../plugins/[Plugin Name]/images/CustomBuildPrepare/[Plugin Name]_CustomBuildPrepare4.png" /> </li>
		
		</div>
		 
		 <!-- The next section is required for additional procedures. Replace [Procedure2} with the plugin procedure name in the following lines. -->	
		 
		 <div class="procedure" id="Procedure2">

           <a name='Procedure2' id="Procedure2"></a> 

            <h2>[Procedure2]</h2>

             <!-- The following is an example description of the procedure. Replace it with the new plugin procedure description. -->
						
						<p>This procedure cleans up after one developer build. The working tree is cleaned up (runtime artifacts are removed, and 
						changes are backed out). This also marks the job as complete in the Gerrit comments.</p>

			<h3>Input</h3>
						
			<ol>
			<li>Go to the [Procedure2] procedure.</li>
			<li>Enter the following parameters:<br />
       <table class="grid">
                <thead>
                    <tr>
                        <th>Parameter</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
								
								<!-- The following is example text. Replace it with the  parameters for the plugin procedure. -->
								
                    <tr>
                        <td class='required'>Change ID</td>
                        <td>The short change ID to build, such as <i>5</i>.</td>
                    </tr>
                    <tr>
                        <td class='required'>Gerrit Config</td>
                        <td>The name of the configuration that has the connection information for Gerrit.</td>
                    </tr>
                    <tr>
                        <td class='required'>Patch ID</td>
                        <td>The short patch set ID to build, such as <i>1</i>.</td>
                    </tr>
                    <tr>
                        <td class='required'>Project</td>
                        <td>The project that contains the change to build.</td>
                    </tr>
                </tbody>
            </table>

				</li>
						
		<br />
		
		<!-- The following image shows the parameter form consisting of the parameter name and the field in the UI. 
		Change the filename (.png) to the new image filename. -->
		
		<img src="../../plugins/[Plugin Name]/images/DevBuildCleanup/[Plugin Name]_DevBuildCleanup2.png" />
		
		<br />

		</ol>   
						
		<h3>Output</h3>
						
		<p>After the job runs, you can view the results on the Job Details page in ElectricCommander. The procedure was completed successfully.</p>
		
		<!-- The following image shows the Job Details page with the results. Change the filename (.png) to the new image filename. -->
		
		<img src="../../plugins/[Plugin Name]/images/DevBuildCleanup/[Plugin Name]_DevBuildCleanup3.png" />
		
		<p>In the <b>[Procedure2]</b> step, click the Log button to see the diagnostic information. 
		The output is similar to the following diagnostic report:</p>	
		
		<!-- The following image shows the diagnostic report in the ElectricCommander UI. Change the filename (.png) to the new image filename. -->
		<img src="../../plugins/[Plugin Name]/images/DevBuildCleanup/[Plugin Name]_DevBuildCleanup4.png" />			
						
    </div>

		<!-- Include this section only if there are examples and use cases. -->	
			
    <h1 id="example">Examples and Use Cases</h1><br />
		
		<!-- The following can be an example of how to run a specific procedure or a use case showing how to perform a specific task 
		using one or more procedures.  -->
		
		<!-- The following summary about use case is optional.  -->

        <p>This plugin has preconfigured example procedures that include the basic process to do the following:</p>
				<ul>
				<li>Clone the repository.</li>
				<li>Get specific changes.</li>
				<li>Run user-defined builds and tests.</li>
				<li>Review and approve changes.</li>
				<li>Reject changes.</li>
				</ul>

        <!-- The following is a use case with several procedures showing how to perform a specific task.  
				Replace it with an example or use case for the new plugin. 
				Replace [UseCase1} with the name of the example or use case in the following lines.-->
				
				<h2>[UseCase1]</h2>

        <div class="procedure" id="UseCase1">

            <a name='UseCase1' id="UseCase1"></a> 

            <p>This procedure runs a sample custom build using the helper methods. This procedure runs the CustomBuildPrepare, DoWork, and TeamBuildCleanup 
						procedures as steps. The DoWork step is where the builds and tests steps are run until TeamBuildCleanup step approves or rejects the changes.</p>

						<h3>Input</h3>
						
			      <ol>
			      <li>Go to the [UseCase1] procedure.</li>
			      <li>Enter the following parameters:<br />
                <table class="grid">
                    <thead>
                        <tr>
                            <th>Parameter</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td class='required'>Gerrit Config</td>
                            <td>The name of the configuration that has the connection information for Gerrit.</td>
                        </tr>
                    </tbody>
                </table>
				     </li>
						
		    <br />
		    <img src="../../plugins/[Plugin Name]/images/CustomBuildExample/[Plugin Name]_CustomBuildExample2.png" />
		    <br />

		    </ol>   
						
		    <h3>Output</h3>
						
		        <p>After the job runs, you can view the results on the Job Details page in ElectricCommander. Every job step was completed successfully.</p>
		        <img src="../../plugins/[Plugin Name]/images/CustomBuildExample/[Plugin Name]_CustomBuildExample3.png" />
		
		        <p>In the <b>CustomBuildExample</b> step, click the Log button to see the diagnostic information. 
						The output is similar to the following diagnostic report:</p>	
						<img src="../../plugins/[Plugin Name]/images/CustomBuildExample/[Plugin Name]_CustomBuildExample4.png" /></li>
						
				</div>

       <!-- The next section is required. Replace [Procedure1} with the plugin procedure name in the following lines. -->
			 
			  <h1>Release Notes</h1>
				
				<!-- For each release, create an h2 section describing new and revised procedures, enhancements, and JIRA fixes. 
				See the following examples for how to write the release note items, which include: 
				- Phrases starting with "Added the N procedure to ...", "Removed the X parameter from the ...", "Fixed the issue where  ...", 
				and so on. 
				- Descriptions of new features or functionality supported by the plugin.
				-->

        <h2>[Plugin name in the ElectricFlow UI]-[Plugin version x.x.x]</h2>

        <ul>

            <li>Added support for Gerrit 2.1.0</li>
						
						<!-- This is an example of how to write a feature update. -->
						
            <li>Updated the plugin logic to support the Gerrit review labels called <i>Code-Review</i> and <i>Verified</i>. Starting with 
						Gerrit 2.6, the Verified label is no longer installed by default. Follow the steps <a href="#gerrit-verified-label">here</a> to install 
						the label that can be used with ElectricCommander.</li>
						
            <!-- This is an example of how to write a new functionality of the plugin. -->
						
						<li>The project/branches manifest file can now be used to filter the changes.</li>
        </ul>

        <h2>[Plugin Name]-2.0.2</h2>
       
			  <ul>
				
				    <!-- These are examples of how to write descriptions of specific bug fixes. -->
						
            <li>Fixed the manifest file.</li>
						
						<li>Fixed a bug with the pseudo code snippet execution.</li>
        </ul>

        <h2 class="help">[Plugin Name]-2.0.1</h2>
   
	      <ul>
				
				    <!-- This is an example of how to write an enhancement. -->
				 
            <li>Updated the logic for applying eligible pending changes to honor project paths defined in the repository manifest.</li>
        
				</ul>

        <h2 class="help">[Plugin Name]-2.0.0</h2>

        <ul>
				     <!-- These are examples of how not to write a release note issue. 
						 Be more specific when describing fixed bugs. 
						 The following phrase is too vague and does not provide useful information to the user. -->
            
						<li>Fixed minor bugs.</li>
						
						<li>Made minor API improvements.</li>
						
        </ul>

	      <h2 class="help">[Plugin Name]-1.0.0</h2>

        <ul>
				   <!-- This is an example of how not to write a release note issue.
					 Be more specific when describing improvements or enhancements. 
					 The following phrase is too vague and does not provide useful information to the user. -->
           
					 
        </ul>
				
				...

    </body>
		
</html>


